/*
 * generated by Xtext 2.15.0
 */
package trichterwolke.init.generator

import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import trichterwolke.init.generator.controller.IControllerGenerator
import trichterwolke.init.generator.db.ICreateSchemaGenerator
import trichterwolke.init.generator.db.IDropSchemaGenerator
import trichterwolke.init.generator.entities.IEntityGenerator
import trichterwolke.init.generator.entities.IEnumerationGenerator
import trichterwolke.init.generator.managers.IManagersGenerator

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class InitGenerator extends AbstractGenerator {

	@Inject
	IEntityGenerator entityGenerator;
	
	@Inject
	IEnumerationGenerator enumerationGenerator;
	
	@Inject
	ICreateSchemaGenerator createSchemaGenerator;
	
	@Inject
	IDropSchemaGenerator dropSchemaGenerator;
	
	@Inject
	IManagersGenerator serviceGenerator;
	
	@Inject
	IControllerGenerator controllerGenerator;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {					
		this.entityGenerator.doGenerate(resource, fsa, context);
		this.enumerationGenerator.doGenerate(resource, fsa, context);
		this.serviceGenerator.doGenerate(resource, fsa, context);
		this.controllerGenerator.doGenerate(resource, fsa, context);
		this.createSchemaGenerator.doGenerate(resource, fsa, context);
		this.dropSchemaGenerator.doGenerate(resource,fsa, context);				
	}
}